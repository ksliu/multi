#include <iostream>
#include <string>
#include <cstdlib>
#include <cstring>

#include "bioinfo.h"

using namespace std;

namespace
{
const int AA_NUM = 21;
const char *AA_SHORTNAME = "ARNDCQEGHILKMFPSTWYVX";
const char * AA_LONGNAME[AA_NUM] =
{ "ALA", "ARG", "ASN", "ASP", "CYS", "GLN", "GLU", "GLY", "HIS", "ILE", "LEU",
  "LYS", "MET", "PHE", "PRO", "SER", "THR", "TRP", "TYR", "VAL", "XAA" };
const int AA_INDEX[26] =
{ 0, -1, 4, 3, 6, 13, 7, 8, 9, -1, 11, 10, 12, 2, -1, 14, 5, 1, 15, 16, -1, 19, 17, 20, 18, -1 };

const double CA_CB_DIST[AA_NUM] =
{ 1.5, 4.1, 2.5, 2.5, 2, 3.1, 3.1, 1, 3.1, 2.3, 2.6, 3.5, 3, 3.4, 1.9, 1.9, 1.9, 3.9, 3.8, 2, 1.5};

const int BLOSUM62[AA_NUM][AA_NUM] = {
    //A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  X
    { 4,-1,-2,-2, 0,-1,-1, 0,-2,-1,-1,-1,-1,-2,-1, 1, 0,-3,-2, 0, 0},//A
    {-1, 5, 0,-2,-3, 1, 0,-2, 0,-3,-2, 2,-1,-3,-2,-1,-1,-3,-2,-3,-1},//R
    {-2, 0, 6, 1,-3, 0, 0, 0, 1,-3,-3, 0,-2,-3,-2, 1, 0,-4,-2,-3,-1},//N
    {-2,-2, 1, 6,-3, 0, 2,-1,-1,-3,-4,-1,-3,-3,-1, 0,-1,-4,-3,-3,-1},//D
    { 0,-3,-3,-3, 9,-3,-4,-3,-3,-1,-1,-3,-1,-2,-3,-1,-1,-2,-2,-1,-2},//C
    {-1, 1, 0, 0,-3, 5, 2,-2, 0,-3,-2, 1, 0,-3,-1, 0,-1,-2,-1,-2,-1},//Q
    {-1, 0, 0, 2,-4, 2, 5,-2, 0,-3,-3, 1,-2,-3,-1, 0,-1,-3,-2,-2,-1},//E
    { 0,-2, 0,-1,-3,-2,-2, 6,-2,-4,-4,-2,-3,-3,-2, 0,-2,-2,-3,-3,-1},//G
    {-2, 0, 1,-1,-3, 0, 0,-2, 8,-3,-3,-1,-2,-1,-2,-1,-2,-2, 2,-3,-1},//H
    {-1,-3,-3,-3,-1,-3,-3,-4,-3, 4, 2,-3, 1, 0,-3,-2,-1,-3,-1, 3,-1},//I
    {-1,-2,-3,-4,-1,-2,-3,-4,-3, 2, 4,-2, 2, 0,-3,-2,-1,-2,-1, 1,-1},//L
    {-1, 2, 0,-1,-3, 1, 1,-2,-1,-3,-2, 5,-1,-3,-1, 0,-1,-3,-2,-2,-1},//K
    {-1,-1,-2,-3,-1, 0,-2,-3,-2, 1, 2,-1, 5, 0,-2,-1,-1,-1,-1, 1,-1},//M
    {-2,-3,-3,-3,-2,-3,-3,-3,-1, 0, 0,-3, 0, 6,-4,-2,-2, 1, 3,-1,-1},//F
    {-1,-2,-2,-1,-3,-1,-1,-2,-2,-3,-3,-1,-2,-4, 7,-1,-1,-4,-3,-2,-2},//P
    { 1,-1, 1, 0,-1, 0, 0, 0,-1,-2,-2, 0,-1,-2,-1, 4, 1,-3,-2,-2, 0},//S
    { 0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1, 1, 5,-2,-2, 0, 0},//T
    {-3,-3,-4,-4,-2,-2,-3,-2,-2,-3,-2,-3,-1, 1,-4,-3,-2,11, 2,-3,-2},//W
    {-2,-2,-2,-3,-2,-1,-2,-3, 2,-1,-1,-2,-1, 3,-3,-2,-2, 2, 7,-1,-1},//Y
    { 0,-3,-3,-3,-1,-2,-2,-3,-3, 3, 1,-2, 1,-1,-2,-2, 0,-3,-1, 4,-1},//V
    { 0,-1,-1,-1,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2, 0, 0,-2,-1,-1,-1},//X
};


const int CLE_NUM = 18;
const int CLESUM[CLE_NUM][CLE_NUM] =
{
    {  71,   19,   12,  -19,  -27,  -22,   -7,  -43,  -39,  -22,  -17,  -12,   -2,   10,   23,   34,   13, -900, },
    {  19,   49,    5,   11,   13,    4,   12,  -94,  -79,  -55,  -49,  -13,  -14,  -11,  -12,   41,   10, -900, },
    {  12,    5,   51,   19,    2,   19,   -6,  -75,  -59,  -42,  -32,   -2,  -12,   -5,    1,    4,   27, -900, },
    { -19,   11,   19,   49,   21,   20,  -32, -122, -105,  -87,  -81,  -24,  -50,  -45,  -43,  -11,   13, -900, },
    { -27,   13,    2,   21,   34,   24,  -24, -125, -112,  -91,  -83,  -23,  -47,  -43,  -49,   -6,   -8, -900, },
    { -22,    4,   19,   20,   24,   48,   -6, -106,  -95,  -73,  -67,  -18,  -34,  -32,  -31,   -2,    0, -900, },
    {  -7,   12,   -6,  -32,  -24,   -6,   68,  -49,  -40,  -21,  -11,   27,   21,   -7,   -2,    3,    8, -900, },
    { -43,  -94,  -75, -122, -125, -106,  -49,   25,   14,   15,    8,  -61,   -2,  -32,  -54,  -58,  -87, -900, },
    { -39,  -79,  -59, -105, -112,  -95,  -40,   14,   51,   12,   17,  -48,   -4,  -16,  -37,  -55,  -69, -900, },
    { -22,  -55,  -42,  -87,  -91,  -73,  -21,   15,   12,   38,   16,  -31,   17,   -1,  -23,  -33,  -43, -900, },
    { -17,  -49,  -32,  -81,  -83,  -67,  -11,    8,   17,   16,   51,    0,   14,   28,    5,  -35,  -24, -900, },
    { -12,  -13,   -2,  -24,  -23,  -18,   27,  -61,  -48,  -31,    0,   71,    4,    5,   -5,  -14,   24, -900, },
    {  -2,  -14,  -12,  -50,  -47,  -34,   21,   -2,   -4,   17,   14,    4,   59,    8,    5,    7,   -7, -900, },
    {  10,  -11,   -5,  -45,  -43,  -32,   -7,  -32,  -16,   -1,   28,    5,    8,   89,   14,   -4,   31, -900, },
    {  23,  -12,    1,  -43,  -49,  -31,   -2,  -54,  -37,  -23,    5,   -5,    5,   14,  102,    2,  -13, -900, },
    {  34,   41,    4,  -11,   -6,   -2,    3,  -58,  -55,  -33,  -35,  -14,    7,   -4,    2,   64,    6, -900, },
    {  13,   10,   27,   13,   -8,    0,    8,  -87,  -69,  -43,  -24,   24,   -7,   31,  -13,    6,   88, -900, },
    {-900, -900, -900, -900, -900, -900, -900, -900, -900, -900, -900, -900, -900, -900, -900, -900, -900, -900, },
};

}

namespace bio
{

int aaCharToInt(char c)
{
    if (c < 'A' || c > 'Z')
    {
        cerr << "Invalid AA letter: " << int(c) << ":" << char(c) << endl;
        exit(1);
    }
    int i = AA_INDEX[c - 'A'];
    if (i == -1)
    {
        cerr << "Invalid AA letter: " << int(c) << ":" << char(c) << endl;
        exit(1);
    }
    return i;
}

char aaIntToChar(int i)
{
    if (i < 0 || i >= AA_NUM)
    {
        cerr << "Invalid AA range: " << i << endl;
        exit(1);
    }
    return AA_SHORTNAME[i];
}

char aaConvert31(const char *resName)
{
    int i;
    for (i = 0; i < AA_NUM; i++)
        if (!strcmp(resName, AA_LONGNAME[i]))
            return AA_SHORTNAME[i];
    //return 'X';
    return 'Z';
}
const char * aaConvert13(char c)
{
    if (c < 'A' || c > 'Z')
    {
        cerr << "Invalid AA letter" << endl;
        cerr << ":" << char(c) << ":" << int(c) << endl;
        exit(1);
    }
    int i = AA_INDEX[c - 'A'];

    if (i != -1)
        return AA_LONGNAME[i];
    else
        return "XAA";
}

double sideChainLengthInt(int i)
{
    if (i < 0 || i >= AA_NUM)
    {
        cerr << "Invalid AA range: " << i << endl;
        exit(1);
    }
    return CA_CB_DIST[i];
}

double sideChainLengthChar(char c)
{
    return sideChainLengthInt(aaCharToInt(c));
}

int blosum62Score(char x, char y)
{
    return BLOSUM62[aaCharToInt(x)][aaCharToInt(y)];
}
int cleScore(char x, char y)
{
    if (x < 'A' || x > 'R' || y < 'A' || y > 'R')
    {
        cerr << "Invalid CLE code" << endl;
        exit(1);
    }
    return CLESUM[x - 'A'][y - 'A'];
}

char cleConsensus(const string &s)
{
    static int index[CLE_NUM], score[CLE_NUM];

    int count[CLE_NUM] =
    { 0 };

    if (s.empty())
    {
        cerr << "The consensus input set is empty." << endl;
        exit(1);
    }

    for (string::size_type i = 0; i != s.size(); ++i)
    {
        int c = s[i] - 'A';
        if (c < 0 || c >= CLE_NUM)
        {
            cerr << "Invalid CLE code" << endl;
            exit(1);
        }
        count[c]++;
    }

    int i, j, n = 0;
    for (i = 0; i < CLE_NUM; i++)
    {
        if (count[i] != 0)
        {
            index[n] = i;
            score[n] = 0;
            n++;
        }
    }
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            score[i] += count[index[j]] * CLESUM[index[i]][index[j]];

    for (j = 0, i = 1; i < n; i++)
    {
        if (score[i] > score[j])
            j = i;
    }
    return char(index[j] + 'A');
}

}
